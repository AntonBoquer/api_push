from supabase import create_client, Client
from config import settings
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SupabaseClient:
    def __init__(self):
        self.client: Client = None
        self.connect()
    
    def connect(self):
        """Initialize connection to Supabase"""
        try:
            if not settings.SUPABASE_URL or not settings.SUPABASE_KEY:
                raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set")
            
            self.client = create_client(settings.SUPABASE_URL, settings.SUPABASE_KEY)
            logger.info("Successfully connected to Supabase")
        except Exception as e:
            logger.error(f"Failed to connect to Supabase: {e}")
            raise
    
    def get_client(self) -> Client:
        """Get the Supabase client instance"""
        if not self.client:
            self.connect()
        return self.client
    
    async def insert_data(self, table_name: str, json_data: dict):
        """Insert data into a Supabase table with simplified schema"""
        try:
            # Prepare data for the simplified schema (id, created_at, json_data)
            data = {
                "json_data": json_data
                # id and created_at will be auto-generated by the database
            }
            result = self.client.table(table_name).insert(data).execute()
            logger.info(f"Data inserted successfully into {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error inserting data into {table_name}: {e}")
            raise
    
    async def get_data(self, table_name: str, filters: dict = None):
        """Retrieve data from a Supabase table"""
        try:
            query = self.client.table(table_name).select("*")
            
            if filters:
                for key, value in filters.items():
                    query = query.eq(key, value)
            
            result = query.execute()
            logger.info(f"Data retrieved successfully from {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error retrieving data from {table_name}: {e}")
            raise
    
    async def update_data(self, table_name: str, data: dict, filters: dict):
        """Update data in a Supabase table"""
        try:
            query = self.client.table(table_name).update(data)
            
            for key, value in filters.items():
                query = query.eq(key, value)
            
            result = query.execute()
            logger.info(f"Data updated successfully in {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error updating data in {table_name}: {e}")
            raise

# Global instance
supabase_client = SupabaseClient()
