from supabase import create_client, Client
from config import settings
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SupabaseClient:
    def __init__(self):
        self.client: Client = None
        self._initialized = False
    
    def connect(self):
        """Initialize connection to Supabase (lazy initialization)"""
        if self._initialized:
            return
            
        try:
            if not settings.SUPABASE_URL or not settings.SUPABASE_KEY:
                logger.warning("SUPABASE_URL and SUPABASE_KEY are not set. Supabase client will not be available.")
                self._initialized = True
                return
            
            # Check if URL is valid (not empty string)
            if settings.SUPABASE_URL.strip() == "" or settings.SUPABASE_KEY.strip() == "":
                logger.warning("SUPABASE_URL or SUPABASE_KEY is empty. Supabase client will not be available.")
                self._initialized = True
                return
            
            self.client = create_client(settings.SUPABASE_URL, settings.SUPABASE_KEY)
            self._initialized = True
            logger.info("Successfully connected to Supabase")
        except Exception as e:
            logger.error(f"Failed to connect to Supabase: {e}")
            self._initialized = True
            # Don't raise - allow the app to start even if Supabase is not configured
    
    def get_client(self) -> Client:
        """Get the Supabase client instance"""
        if not self._initialized:
            self.connect()
        return self.client
    
    async def insert_data(self, table_name: str, json_data: dict):
        """Insert data into a Supabase table with simplified schema"""
        try:
            # Ensure client is initialized
            if not self._initialized:
                self.connect()
            
            if not self.client:
                logger.warning(f"Supabase client not available. Skipping insert to {table_name}")
                return None
            
            # Prepare data for the simplified schema (id, created_at, json_data)
            data = {
                "json_data": json_data
                # id and created_at will be auto-generated by the database
            }
            result = self.client.table(table_name).insert(data).execute()
            logger.info(f"Data inserted successfully into {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error inserting data into {table_name}: {e}")
            raise
    
    async def get_data(self, table_name: str, filters: dict = None):
        """Retrieve data from a Supabase table"""
        try:
            # Ensure client is initialized
            if not self._initialized:
                self.connect()
            
            if not self.client:
                logger.warning(f"Supabase client not available. Skipping get from {table_name}")
                return None
            
            query = self.client.table(table_name).select("*")
            
            if filters:
                for key, value in filters.items():
                    query = query.eq(key, value)
            
            result = query.execute()
            logger.info(f"Data retrieved successfully from {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error retrieving data from {table_name}: {e}")
            raise
    
    async def update_data(self, table_name: str, data: dict, filters: dict):
        """Update data in a Supabase table"""
        try:
            # Ensure client is initialized
            if not self._initialized:
                self.connect()
            
            if not self.client:
                logger.warning(f"Supabase client not available. Skipping update to {table_name}")
                return None
            
            query = self.client.table(table_name).update(data)
            
            for key, value in filters.items():
                query = query.eq(key, value)
            
            result = query.execute()
            logger.info(f"Data updated successfully in {table_name}")
            return result
        except Exception as e:
            logger.error(f"Error updating data in {table_name}: {e}")
            raise

# Global instance
supabase_client = SupabaseClient()
